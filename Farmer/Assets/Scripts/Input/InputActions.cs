//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerMap"",
            ""id"": ""034a306c-9995-4702-ba35-194538266ca2"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""25746da8-129a-4e3b-97e9-d34bf435d7d5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LBK"",
                    ""type"": ""Button"",
                    ""id"": ""210e6cfe-261e-4e9c-b326-6c75ec7f0f4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RBK"",
                    ""type"": ""Button"",
                    ""id"": ""0c965d55-962e-44b3-8c36-65d6ad0be7ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f2a3a1d3-8fab-4488-805b-4f56e4e10d56"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""75a2da4b-eaf0-43ac-9a04-17ae16c6e8dd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b40b0792-b515-41ec-bdf2-73b5f97b0327"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""970118d7-1636-4e94-b93c-09fe0ed293fb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7ae3c9f7-c77e-4587-82aa-367ecfc936f7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5d714f7c-d73e-46f8-9003-c61a4d893965"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LBK"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d359f161-713b-41f5-85af-d776ad3eb802"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RBK"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InventoryMap"",
            ""id"": ""a3b1922f-5963-47f4-8882-bafac1824f51"",
            ""actions"": [
                {
                    ""name"": ""ChooseFirstCell"",
                    ""type"": ""Button"",
                    ""id"": ""38abc9b6-fd9e-464d-8353-d380ac2aa0c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChooseSecondCell"",
                    ""type"": ""Button"",
                    ""id"": ""0c9037d8-7a3a-41c3-92fd-185e6770df86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChooseThirdCell"",
                    ""type"": ""Button"",
                    ""id"": ""1e151e78-0916-424f-b807-02d42c081bcc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChooseFourthCell"",
                    ""type"": ""Button"",
                    ""id"": ""8611d126-3241-4df4-bea6-1f358cf1bff0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a2f9a90b-a73b-451e-909a-443ffd13c2b4"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseFirstCell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ea69903-1ef0-404d-afeb-2b49a3c71d37"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseSecondCell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c283153-6845-4357-adcb-315cc314c87c"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseThirdCell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4650cca3-0a10-4d3e-a855-890e164de949"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseFourthCell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MenuActions"",
            ""id"": ""119f7e97-4665-4427-bf7f-668e7be427c0"",
            ""actions"": [
                {
                    ""name"": ""OpenCloseGameMenu"",
                    ""type"": ""Button"",
                    ""id"": ""29ce6929-1f59-4865-85d9-bdf2a1f80d9c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8e7c3c6e-f5d7-42bd-acea-c18543eb093a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenCloseGameMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PSScheme"",
            ""bindingGroup"": ""PSScheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerMap
        m_PlayerMap = asset.FindActionMap("PlayerMap", throwIfNotFound: true);
        m_PlayerMap_Movement = m_PlayerMap.FindAction("Movement", throwIfNotFound: true);
        m_PlayerMap_LBK = m_PlayerMap.FindAction("LBK", throwIfNotFound: true);
        m_PlayerMap_RBK = m_PlayerMap.FindAction("RBK", throwIfNotFound: true);
        // InventoryMap
        m_InventoryMap = asset.FindActionMap("InventoryMap", throwIfNotFound: true);
        m_InventoryMap_ChooseFirstCell = m_InventoryMap.FindAction("ChooseFirstCell", throwIfNotFound: true);
        m_InventoryMap_ChooseSecondCell = m_InventoryMap.FindAction("ChooseSecondCell", throwIfNotFound: true);
        m_InventoryMap_ChooseThirdCell = m_InventoryMap.FindAction("ChooseThirdCell", throwIfNotFound: true);
        m_InventoryMap_ChooseFourthCell = m_InventoryMap.FindAction("ChooseFourthCell", throwIfNotFound: true);
        // MenuActions
        m_MenuActions = asset.FindActionMap("MenuActions", throwIfNotFound: true);
        m_MenuActions_OpenCloseGameMenu = m_MenuActions.FindAction("OpenCloseGameMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMap
    private readonly InputActionMap m_PlayerMap;
    private List<IPlayerMapActions> m_PlayerMapActionsCallbackInterfaces = new List<IPlayerMapActions>();
    private readonly InputAction m_PlayerMap_Movement;
    private readonly InputAction m_PlayerMap_LBK;
    private readonly InputAction m_PlayerMap_RBK;
    public struct PlayerMapActions
    {
        private @InputActions m_Wrapper;
        public PlayerMapActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMap_Movement;
        public InputAction @LBK => m_Wrapper.m_PlayerMap_LBK;
        public InputAction @RBK => m_Wrapper.m_PlayerMap_RBK;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @LBK.started += instance.OnLBK;
            @LBK.performed += instance.OnLBK;
            @LBK.canceled += instance.OnLBK;
            @RBK.started += instance.OnRBK;
            @RBK.performed += instance.OnRBK;
            @RBK.canceled += instance.OnRBK;
        }

        private void UnregisterCallbacks(IPlayerMapActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @LBK.started -= instance.OnLBK;
            @LBK.performed -= instance.OnLBK;
            @LBK.canceled -= instance.OnLBK;
            @RBK.started -= instance.OnRBK;
            @RBK.performed -= instance.OnRBK;
            @RBK.canceled -= instance.OnRBK;
        }

        public void RemoveCallbacks(IPlayerMapActions instance)
        {
            if (m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMapActions @PlayerMap => new PlayerMapActions(this);

    // InventoryMap
    private readonly InputActionMap m_InventoryMap;
    private List<IInventoryMapActions> m_InventoryMapActionsCallbackInterfaces = new List<IInventoryMapActions>();
    private readonly InputAction m_InventoryMap_ChooseFirstCell;
    private readonly InputAction m_InventoryMap_ChooseSecondCell;
    private readonly InputAction m_InventoryMap_ChooseThirdCell;
    private readonly InputAction m_InventoryMap_ChooseFourthCell;
    public struct InventoryMapActions
    {
        private @InputActions m_Wrapper;
        public InventoryMapActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChooseFirstCell => m_Wrapper.m_InventoryMap_ChooseFirstCell;
        public InputAction @ChooseSecondCell => m_Wrapper.m_InventoryMap_ChooseSecondCell;
        public InputAction @ChooseThirdCell => m_Wrapper.m_InventoryMap_ChooseThirdCell;
        public InputAction @ChooseFourthCell => m_Wrapper.m_InventoryMap_ChooseFourthCell;
        public InputActionMap Get() { return m_Wrapper.m_InventoryMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryMapActions set) { return set.Get(); }
        public void AddCallbacks(IInventoryMapActions instance)
        {
            if (instance == null || m_Wrapper.m_InventoryMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InventoryMapActionsCallbackInterfaces.Add(instance);
            @ChooseFirstCell.started += instance.OnChooseFirstCell;
            @ChooseFirstCell.performed += instance.OnChooseFirstCell;
            @ChooseFirstCell.canceled += instance.OnChooseFirstCell;
            @ChooseSecondCell.started += instance.OnChooseSecondCell;
            @ChooseSecondCell.performed += instance.OnChooseSecondCell;
            @ChooseSecondCell.canceled += instance.OnChooseSecondCell;
            @ChooseThirdCell.started += instance.OnChooseThirdCell;
            @ChooseThirdCell.performed += instance.OnChooseThirdCell;
            @ChooseThirdCell.canceled += instance.OnChooseThirdCell;
            @ChooseFourthCell.started += instance.OnChooseFourthCell;
            @ChooseFourthCell.performed += instance.OnChooseFourthCell;
            @ChooseFourthCell.canceled += instance.OnChooseFourthCell;
        }

        private void UnregisterCallbacks(IInventoryMapActions instance)
        {
            @ChooseFirstCell.started -= instance.OnChooseFirstCell;
            @ChooseFirstCell.performed -= instance.OnChooseFirstCell;
            @ChooseFirstCell.canceled -= instance.OnChooseFirstCell;
            @ChooseSecondCell.started -= instance.OnChooseSecondCell;
            @ChooseSecondCell.performed -= instance.OnChooseSecondCell;
            @ChooseSecondCell.canceled -= instance.OnChooseSecondCell;
            @ChooseThirdCell.started -= instance.OnChooseThirdCell;
            @ChooseThirdCell.performed -= instance.OnChooseThirdCell;
            @ChooseThirdCell.canceled -= instance.OnChooseThirdCell;
            @ChooseFourthCell.started -= instance.OnChooseFourthCell;
            @ChooseFourthCell.performed -= instance.OnChooseFourthCell;
            @ChooseFourthCell.canceled -= instance.OnChooseFourthCell;
        }

        public void RemoveCallbacks(IInventoryMapActions instance)
        {
            if (m_Wrapper.m_InventoryMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInventoryMapActions instance)
        {
            foreach (var item in m_Wrapper.m_InventoryMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InventoryMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InventoryMapActions @InventoryMap => new InventoryMapActions(this);

    // MenuActions
    private readonly InputActionMap m_MenuActions;
    private List<IMenuActionsActions> m_MenuActionsActionsCallbackInterfaces = new List<IMenuActionsActions>();
    private readonly InputAction m_MenuActions_OpenCloseGameMenu;
    public struct MenuActionsActions
    {
        private @InputActions m_Wrapper;
        public MenuActionsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenCloseGameMenu => m_Wrapper.m_MenuActions_OpenCloseGameMenu;
        public InputActionMap Get() { return m_Wrapper.m_MenuActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActionsActions set) { return set.Get(); }
        public void AddCallbacks(IMenuActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuActionsActionsCallbackInterfaces.Add(instance);
            @OpenCloseGameMenu.started += instance.OnOpenCloseGameMenu;
            @OpenCloseGameMenu.performed += instance.OnOpenCloseGameMenu;
            @OpenCloseGameMenu.canceled += instance.OnOpenCloseGameMenu;
        }

        private void UnregisterCallbacks(IMenuActionsActions instance)
        {
            @OpenCloseGameMenu.started -= instance.OnOpenCloseGameMenu;
            @OpenCloseGameMenu.performed -= instance.OnOpenCloseGameMenu;
            @OpenCloseGameMenu.canceled -= instance.OnOpenCloseGameMenu;
        }

        public void RemoveCallbacks(IMenuActionsActions instance)
        {
            if (m_Wrapper.m_MenuActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuActionsActions @MenuActions => new MenuActionsActions(this);
    private int m_PSSchemeSchemeIndex = -1;
    public InputControlScheme PSSchemeScheme
    {
        get
        {
            if (m_PSSchemeSchemeIndex == -1) m_PSSchemeSchemeIndex = asset.FindControlSchemeIndex("PSScheme");
            return asset.controlSchemes[m_PSSchemeSchemeIndex];
        }
    }
    public interface IPlayerMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLBK(InputAction.CallbackContext context);
        void OnRBK(InputAction.CallbackContext context);
    }
    public interface IInventoryMapActions
    {
        void OnChooseFirstCell(InputAction.CallbackContext context);
        void OnChooseSecondCell(InputAction.CallbackContext context);
        void OnChooseThirdCell(InputAction.CallbackContext context);
        void OnChooseFourthCell(InputAction.CallbackContext context);
    }
    public interface IMenuActionsActions
    {
        void OnOpenCloseGameMenu(InputAction.CallbackContext context);
    }
}
